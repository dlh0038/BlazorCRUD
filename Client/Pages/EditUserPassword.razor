@page "/user/editpassword/{userId:int}"
@using BlazorCRUD.Shared.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime js
@inject NavigationManager uriHelper
<h2>Edit User</h2>
<br />
<EditForm Model="@user" OnValidSubmit="@EditUserPasswordMethod">
    <DataAnnotationsValidator />
    <div class="form-group">
        <div>
            <table>
                <tr>
                    <td>Name</td>
                    <td>@user.FirstName @user.LastName</td>
                </tr>
                <tr>
                    <td>Username</td>
                    <td>@user.Username</td>
                </tr>
            </table>
        </div>
    </div>
    <div class="form-group">
        <label>New Password :</label>
        <div>
            <InputText @bind-Value="@newpassword" />
            <ValidationMessage For="@(() => user.Password)" />
        </div>
    </div>
    
</EditForm>
<div class="form-group">
    <input type="submit" value="Submit" @onclick="(async () => await EditUserPasswordMethod())" class="btn btn-success" />
    <input type="submit" value="Cancel" @onclick="(() => Cancel())" class="btn btn-warning" />
</div>
@code {
    [Parameter]
    public int userId { get; set; }
    public string newpassword {get; set;}
    User user = new User();
    protected override async Task OnInitializedAsync()
    {
        user = await Http.GetFromJsonAsync<User>("/api/User/" + Convert.ToInt32(userId));
    }
    async Task EditUserPasswordMethod()
    {
        Console.WriteLine($"edit password called {newpassword}");
        if(newpassword != null && newpassword.Length > 1)
        {
            await Http.PutAsJsonAsync("api/User/updatepassword", newpassword);
            //await Http.PutAsJsonAsync("api/user", user);
            //await js.InvokeVoidAsync("alert", $"Updated Successfully!");
            uriHelper.NavigateTo("fetchuserdetails");
        }

    }
    protected async Task RemoveUser(int userID)
    {
        await Http.DeleteAsync("api/User/" + userID);
        NavigationManager.NavigateTo("/fetchuserdetails");
    }
    protected async Task EditUserMethod(User user)
    {
        await Http.PutAsJsonAsync("api/User", user);
        NavigationManager.NavigateTo("/fetchuserdetails");

    }
    void Cancel()
    {
        NavigationManager.NavigateTo("/fetchuserdetails");
    }
}