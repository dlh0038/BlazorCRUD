@page "/courseenrollment"
@using BlazorCRUD.Shared.ContosoUniversityModels
@inject HttpClient service
@inject IJSRuntime js
@inject NavigationManager NavigationManager

<h1>Courses</h1>
<p>
            Find by name containing: <input type="text" @bind="SearchString" />
            <button type="button" class="btn btn-primary" @onclick="(() => SearchNames(SearchString))">Search</button>
</p>

<div class="container">

    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    
                    <th>Course Name</th>
                    <th>Student Name</th>
                    
                </tr>
            </thead>
            <tbody>
                @if (SearchString != null && QResult.Any())
                {
                    @foreach (var qresult in QResult)
                    {
                        <tr>
                            <td>@qresult.CourseName</td>
                            <td>@qresult.StudentName</td>
                            
                        </tr>
                    }
                }
                
                else
                {
                    <tr><td colspan="6"><strong>Search for records</strong></td></tr>
                }
            </tbody>
        </table>
    </div>

</div>

<button type="button" class="btn btn-primary" @onclick=NavigateToAccount>Return to CU Homepage</button>
@code {
    string SearchString = null;
    List<Enrollment> Enrollments = new List<Enrollment>();
    List<Student> Students = new List<Student>();
    List<Course> Courses = new List<Course>();
    class QueryResult{ public string CourseName{get; set;}
                       public string StudentName {get; set;}
                       public Grade? grade {get; set;}}
    List<QueryResult> QResult = new List<QueryResult>();
    protected override async Task OnInitializedAsync()
    {
        //await RefreshProducts();
        Enrollments = await service.GetFromJsonAsync<List<Enrollment>>("api/enrollment");
        Students = await service.GetFromJsonAsync<List<Student>>("api/student");
        Courses = await service.GetFromJsonAsync<List<Course>>("api/course");

        //print query result to console to check query
       // query.ToList().ForEach(x => Console.WriteLine(x.name+" "+x.courseEnrollment));
        
    } 
    void SearchNames(String SearchName)
    {
        var query =
            from course in Courses
            where course.Title.ToLower().Contains(SearchString)
            join enrol in Enrollments on course.CourseID equals enrol.CourseID
            join stud in Students on enrol.StudentID equals stud.ID
            select new QueryResult{CourseName = course.Title,
                                   StudentName = stud.FirstMidName 
                                   };
        //query.ToList().ForEach(x => Console.WriteLine(x.name +" "+ x.courseEnrollment));
        //Console.WriteLine(query.GetType());
        QResult = query.ToList();
        //return query.ToList();
    }
    void NavigateToAccount(){
        NavigationManager.NavigateTo("/contosouniversity");
    }
    void print(string text){
        Console.WriteLine(text);
    }
}