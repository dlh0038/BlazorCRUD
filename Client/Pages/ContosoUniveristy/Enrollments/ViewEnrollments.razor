@page "/enrollment"
@using BlazorCRUD.Shared.ContosoUniversityModels
@inject HttpClient service
@inject IJSRuntime js
@inject NavigationManager NavigationManager

<h1>Enrollment</h1>

<div class="container">

    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Student Name</th>
                    <th>Course Name</th>
                    <th>Grade</th>
                </tr>
            </thead>
            <tbody>
                @if (QResult.Any())
                {
                    @foreach (var qresult in QResult)
                    {
                        <tr>
                            <td>@qresult.courseEnrollmentName</td>
                            <td>@qresult.CourseName</td>
                            <td>@qresult.grade</td>
                        </tr>
                    }
                }
                
                else
                {
                    <tr><td colspan="6"><strong>Search for records</strong></td></tr>
                }
            </tbody>
        </table>
    </div>

</div>
<!--<button type="button" class="btn btn-primary" @onclick="(()=> NavigationManager.NavigateTo("/contosouniversity")">Return to CU Homepage</button>
-->
<button type="button" class="btn btn-primary" @onclick=NavigateToAccount>Return to CU Homepage</button>
@code {
    string SearchString = null;
    List<Enrollment> Enrollments = new List<Enrollment>();
    List<Student> Students = new List<Student>();
    List<Course> Courses = new List<Course>();
    class QueryResult{ public string CourseName{get; set;}
                    public string courseEnrollmentName {get; set;}
                    public Grade? grade {get; set;}}
    List<QueryResult> QResult = new List<QueryResult>();
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(Enrollments);
        //await RefreshProducts();
        Enrollments = await service.GetFromJsonAsync<List<Enrollment>>("api/enrollment");
        Students = await service.GetFromJsonAsync<List<Student>>("api/student");
        Courses = await service.GetFromJsonAsync<List<Course>>("api/course");
        var query = 
            from stud in Students 
            join enrol in Enrollments on stud.ID equals enrol.StudentID
            join course in Courses on enrol.CourseID equals course.CourseID
            select new QueryResult{ CourseName = course.Title, 
                                    courseEnrollmentName = stud.FirstMidName+" "+stud.LastName,
                                    grade = enrol.Grade};
        QResult = query.ToList();
    }
    @* void SearchCourses(string coursename)
    {
        var query = 
            from stud in Students 
            join enrol in Enrollments on stud.ID equals enrol.StudentID
            join course in Courses on enrol.CourseID equals course.CourseID
            where course.Title.ToLower().Contains(SearchString.ToLower())
            select new QueryResult{ CourseName = course.Title, courseEnrollmentName = stud.FirstMidName+" "+stud.LastName};
        QResult = query.ToList();
        Console.WriteLine("listing courses");
        QResult.ForEach(x => Console.WriteLine(x.CourseName));
    }  *@
    void NavigateToAccount(){
        NavigationManager.NavigateTo("/contosouniversity");
    }
}